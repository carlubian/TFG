<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DetallesSensorIndef.Text" xml:space="preserve">
    <value>No necesitamos ningún dato adicional para este tipo de sensor.

¡Todo está listo para funcionar!</value>
  </data>
  <data name="InicioAyudaContent.Text" xml:space="preserve">
    <value>¡Hola!

¿Necesitas ayuda con algo? Elige el tema de entre las opciones que aparecen a la izquierda, y recibirás más información.

Si en algún momento te pierdes y quieres salir, solo tienes que hacer clic derecho sobre el botón central, y volverás a la pantalla donde estabas antes.</value>
    <comment>Texto del diálogo inicial del sistema de asistencia.</comment>
  </data>
  <data name="InicioAyudaTitle.Text" xml:space="preserve">
    <value>Sistema de ayuda</value>
    <comment>Título del diálogo inicial del sistema de asistencia.</comment>
  </data>
  <data name="NueIntroText.Text" xml:space="preserve">
    <value>Bienvenido al Visualizador de Datos de Sensores. Parece que es la primera vez que usas esta aplicación.

Si prefieres empezar de cero, pulsa el botón 'Saltar' para saltarte la introducción.

Si ya has usado la aplicación antes y tienes una copia de seguridad de los ajustes, pulsa el botón 'Importar' para recuperar la configuración anterior.

Si quieres abrir el sistema de asistencia para recibir ayuda o utilizar las funciones de esta aplicación de forma sencilla, pulsa el botón 'Ayuda'. Ten en cuenta que el botón de ayuda aparece en todas las pantallas, y podrás usarlo siempre que necesites asistencia.</value>
  </data>
  <data name="NuevoSensorClasiText.Text" xml:space="preserve">
    <value>¡Estupendo! El servidor remoto parece estar funcionando correctamente.

Ahora, necesitamos algunos datos más para saber dónde colocar el nuevo sensor. La mayoría de estos datos pueden ser modificados más adelante.
</value>
  </data>
  <data name="NuevoSensorFinalText.Text" xml:space="preserve">
    <value>Lo único que falta ahora es determinar algunos ajustes propios del tipo de sensor elegido.

Según el tipo de sensor, estos ajustes serán diferentes. Al igual que los detalles anteriores, también pueden ser modificados en cualquier momento.
</value>
  </data>
  <data name="NuevoSensorIntroText.Text" xml:space="preserve">
    <value>Vamos a conectar un nuevo sensor al sistema. Antes de empezar, asegúrate de que el servidor remoto está correctamente instalado y con el proceso adecuado en ejecución. Además, tanto este equipo como el equipo remoto deben tener conexión a internet.

Para empezar, introduce los siguientes datos básicos sobre el servidor remoto:
</value>
  </data>
  <data name="NuevoSensorNUE1Text.Text" xml:space="preserve">
    <value>Empecemos conectando un nuevo sensor al sistema.

Sigue las instrucciones de esta ventana, y cuando termines pulsa el botón 'Siguiente'</value>
  </data>
  <data name="NuevoSensorNUE2Text.Text" xml:space="preserve">
    <value>Ahora debes indicar cómo se clasifica el sensor que estás conectando.

Estos parámetros no son necesarios para la conexión, pero ayudarán a la hora de filtrar y ordenar listados de sensores.</value>
  </data>
  <data name="NuevoSensorNUE3Text.Text" xml:space="preserve">
    <value>Según el tipo de sensor que estés intentando conectar, puede que tengas que introducir datos adicionales. Si es así, sigue las instrucciones que se muestran en pantalla.

Con esto termina la introducción a la aplicación. Si tienes más preguntas, consulta la documentación.</value>
  </data>
</root>