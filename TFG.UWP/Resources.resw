<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AyudaListadosContent.Text" xml:space="preserve">
    <value>¿Cómo quieres filtrar el listado?

Por país: Mostrará solo los sensores localizados en el país elegido.
Ver todos: Mostrará todos los sensores conectados.
Por lugar: Mostrará solo los sensores instalados en un lugar (oficina, laboratorio, ...) elegido.
Por tipo: Mostrará solo los sensores del tipo elegido.
Por modo: Mostrará solo los sensores en modo elegido (pruebas o producción).</value>
    <comment>Contenido del panel inicial de listados del sistema de ayuda.</comment>
  </data>
  <data name="AyudaSensoresContent.Text" xml:space="preserve">
    <value>Conectar un nuevo sensor lo hará aparecer en los listados. Asegúrate de que el ordenador donde está el sensor tenga instalado un servidor Kaomi con el proceso correspondiente.

Editar un sensor te permite modificar alguno de sus ajustes.

Eliminar un sensor lo desconectará de la aplicación, pero el servidor Kaomi seguirá funcionando a no ser que lo cierres manualmente.

Ver los detalles de un sensor mostrará información específica sobre su estado y conexión.</value>
    <comment>Contenido del panel inicial de sensores del sistema de ayuda.</comment>
  </data>
  <data name="DetallesSensorIndef.Text" xml:space="preserve">
    <value>No necesitamos ningún dato adicional para este tipo de sensor.

¡Todo está listo para funcionar!</value>
  </data>
  <data name="InicioAyudaContent.Text" xml:space="preserve">
    <value>Este es el sistema de Acceso Rápido. A través de la cuadrícula contextual podrás llegar a todas las opciones de la aplicación.

Si en algún momento te pierdes y quieres salir, solo tienes que hacer clic derecho sobre el botón central para cerrar el panel.

Recuerda que también puedes usar el teclado numérico para navegar por la cuadrícula contextual.</value>
    <comment>Texto del diálogo inicial del sistema de asistencia.</comment>
  </data>
  <data name="InicioAyudaTitle.Text" xml:space="preserve">
    <value>Acceso Rápido</value>
    <comment>Título del diálogo inicial del sistema de asistencia.</comment>
  </data>
  <data name="ListadoPorLugarContent.Text" xml:space="preserve">
    <value>Ahora elige el lugar por el que quieres filtrar el listado. Se mostrarán todos los sensores conectados que estén instalados en ese lugar.

Si necesitas filtrar por más de un criterio, puedes usar el panel de filtros de la vista de resultados.</value>
    <comment>Contenido del panel de listado por lugar del sistema de ayuda.</comment>
  </data>
  <data name="ListadoPorModoContent.Text" xml:space="preserve">
    <value>Ahora elige el modo de operación por el que quieres filtrar el listado. Se mostrarán los sensores conectados que estén funcionando en ese modo.

Si necesitas filtrar por más de un criterio, puedes usar el panel de filtros de la vista de resultados.</value>
  </data>
  <data name="ListadoPorPaisContent.Text" xml:space="preserve">
    <value>Ahora elige el país por el que quieres filtrar el listado. Se mostrarán todos los sensores conectados que estén en ese país.

Si necesitas filtrar por más de un criterio, puedes usar el panel de filtros de la vista de resultados.</value>
  </data>
  <data name="ListadoPorTipoContent.Text" xml:space="preserve">
    <value>Ahora elige el lugar por el que quieres filtrar el listado. Se mostrarán todos los sensores conectados que sean de ese tipo.

Si necesitas filtrar por más de un criterio, puedes usar el panel de filtros de la vista de resultados.</value>
  </data>
  <data name="NueIntroText.Text" xml:space="preserve">
    <value>Bienvenido al Visualizador de Datos de Sensores. Parece que es la primera vez que usas esta aplicación.

Si prefieres empezar de cero, pulsa el botón 'Saltar' para saltarte la introducción.

Si ya has usado la aplicación antes y tienes una copia de seguridad de los ajustes, pulsa el botón 'Importar' para recuperar la configuración anterior.

Si quieres abrir el sistema de acceso rápido para utilizar las funciones de esta aplicación de forma sencilla, pulsa el botón 'Acceso Rápido'. Ten en cuenta que este botón aparece en todas las pantallas, y podrás usarlo siempre como alternativa al esquema de navegación estándar.</value>
  </data>
  <data name="NuevoSensorClasiText.Text" xml:space="preserve">
    <value>¡Estupendo! El servidor remoto parece estar funcionando correctamente.

Ahora, necesitamos algunos datos más para saber dónde colocar el nuevo sensor. La mayoría de estos datos pueden ser modificados más adelante.
</value>
  </data>
  <data name="NuevoSensorFinalText.Text" xml:space="preserve">
    <value>Lo único que falta ahora es determinar algunos ajustes propios del tipo de sensor elegido.

Según el tipo de sensor, estos ajustes serán diferentes. Al igual que los detalles anteriores, también pueden ser modificados en cualquier momento.
</value>
  </data>
  <data name="NuevoSensorIntroText.Text" xml:space="preserve">
    <value>Vamos a conectar un nuevo sensor al sistema. Antes de empezar, asegúrate de que el servidor remoto está correctamente instalado y con el proceso adecuado en ejecución. Además, tanto este equipo como el equipo remoto deben tener conexión a internet.

Para empezar, introduce los siguientes datos básicos sobre el servidor remoto:
</value>
  </data>
  <data name="SensorDetallesContent.Text" xml:space="preserve">
    <value>Selecciona el sensor del que quieres ver detalles. Se mostrarán todos los datos disponibles de ese sensor.

Ten en cuenta que si el sensor está desconectado, se mostrarán menos datos.</value>
  </data>
  <data name="SensorEliminarContent.Text" xml:space="preserve">
    <value>Selecciona el sensor que quieres eliminar. Se desconectará del sistema, aunque su servidor remoto seguirá funcionando hasta que se desconecte manualmente.

¡Cuidado! Esta acción es irreversible.</value>
  </data>
</root>